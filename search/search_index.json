{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"[![Build status](https://img.shields.io/github/actions/workflow/status/FOR-sight-ai/interpreto/build.yml?branch=main)](https://github.com/FOR-sight-ai/interpreto/actions?query=workflow%3Abuild) [![Docs status](https://img.shields.io/readthedocs/interpreto)](TODO) [![Version](https://img.shields.io/pypi/v/interpreto?color=blue)](https://pypi.org/project/interpreto/) [![Python Version](https://img.shields.io/pypi/pyversions/interpreto.svg?color=blue)](https://pypi.org/project/interpreto/) [![Downloads](https://static.pepy.tech/badge/interpreto)](https://pepy.tech/project/interpreto) [![License](https://img.shields.io/github/license/FOR-sight-ai/interpreto)](https://github.com/FOR-sight-ai/interpreto/blob/main/LICENSE)  ## \ud83d\ude80 Quick Start  You can get acquainted with our library with our [Getting started](TODO) <sub> [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](TODO)</sub> tutorial. `interpreto` can be installed using Pypi:   <pre><code>pip install interpreto\n</code></pre>    Now that `interpreto` is installed, here are some basic examples of what you can do with the available modules.  ## \ud83d\udce6 What's Included  TODO: A list or table of methods available  ## \ud83d\udc4d Contributing  Feel free to propose your ideas or come and contribute with us on the Libname toolbox! We have a specific document where we describe in a simple way how to make your [first pull request](docs/contributing.md).  ## \ud83d\udc40 See Also  More from the DEEL project:  - [Xplique](https://github.com/deel-ai/xplique) a Python library exclusively dedicated to explaining neural networks. - [deel-lip](https://github.com/deel-ai/deel-lip) a Python library for training k-Lipschitz neural networks on TF. - [Influenciae](https://github.com/deel-ai/influenciae) Python toolkit dedicated to computing influence values for the discovery of potentially problematic samples in a dataset. - [deel-torchlip](https://github.com/deel-ai/deel-torchlip) a Python library for training k-Lipschitz neural networks on PyTorch. - [DEEL White paper](https://arxiv.org/abs/2103.10529) a summary of the DEEL team on the challenges of certifiable AI and the role of data quality, representativity and explainability for this purpose.  ## \ud83d\ude4f Acknowledgments  This project received funding from the French \u201dInvesting for the Future \u2013 PIA3\u201d program within the Artificial and Natural Intelligence Toulouse Institute (ANITI). The authors gratefully acknowledge the support of the [DEEL](https://www.deel.ai) and the FOR projects.  ## \ud83d\udc68\u200d\ud83c\udf93 Creators  Interpreto \ud83e\ude84 is a project of the FOR and the [DEEL](https://www.deel.ai) teams at the [IRT Saint-Exup\u00e9ry](https://www.irt-saintexupery.com/) in Toulouse, France.   ## \ud83d\uddde\ufe0f Citation  If you use Interpreto \ud83e\ude84 as part of your workflow in a scientific publication, please consider citing \ud83d\uddde\ufe0f [our paper](TODO):   <pre><code>TODO bibtex\n</code></pre>"},{"location":"about/","title":"About","text":"<p><code>interpreto</code> is developed as part of the Artificial and Natural Intelligence Toulouse Institute (DEEL/FOR/ANITI) program.</p> <p>DEEL/FOR/ANITI is the repository owner and the write rights manager.</p> <p>These management rules are intended to be collaborative and all those involved in the project are invited to contribute to its improvement.</p>"},{"location":"about/#functions","title":"Functions","text":""},{"location":"about/#governance-committee","title":"Governance committee","text":"<p>The governance committee is initially composed of DEEL and FOR members who contributed to the first version of <code>interpreto</code> and are the only contributors to the main branch.</p> <p>The governance committee is responsible for the main branch that contains the code of the version of the library that is officially recognized.</p> <p>These governance committee members are the only ones able to merge pull requests into this branch which come from contributions branches.</p> <p>The governance committee identifies among the contributors who by their merits can join the committee.</p>"},{"location":"about/#contributors","title":"Contributors","text":"<p>A contributor is anyone who comments on any aspects relating to the project: comments on an issue or pull request, documentation, architecture, code and validation tests or anybody with a merged pull request.</p> <p>All governance committee members are contributors.</p>"},{"location":"about/#maintainers","title":"Maintainers","text":"<p>All contributors with write rights (commit rights) are maintainers.</p>"},{"location":"about/#contributions","title":"Contributions","text":"<p>Contributions rules are defined and developed in docs/contributing.md.</p> <p>Pull requests with major changes must be approved by at least two members of the governance committee.</p> <p>Pull requests with minor changes must be approved by at least one member of the governance committee.</p>"},{"location":"about/#moderators","title":"Moderators","text":"<ul> <li>Fanny Jourdan fanny.jourdan@irt-saintexupery.com</li> <li>Antonin Poch\u00e9 antonin.poche@irt-saintexupery.com</li> <li>Thomas Mullor thomas.mullor@irt-saintexupery.com</li> <li>Gabriele Sarti gabriele.sarti996@gmail.com</li> </ul>"},{"location":"contributing/","title":"How to contribute","text":"<p>Thanks for taking the time to contribute!</p> <p>From opening a bug report to creating a pull request: every contribution is appreciated and welcome. If you're planning to implement a new feature or change the API please create an issue first. This way we can ensure that your precious work is not in vain.</p>"},{"location":"contributing/#setup-and-dependency-installation","title":"Setup and dependency installation","text":"<ul> <li>Clone the repo <code>git clone https://github.com/FOR-sight-ai/interpreto.git</code>.</li> <li>Go to your freshly downloaded repo <code>cd interpreto</code></li> <li>Create a virtual environment and install the necessary dependencies for development.</li> </ul> <p>We use <code>uv</code> to manage Interpreto dependencies. If you dont have <code>uv</code>, you should install with <code>make uv-download</code>.</p> <p>To install dependencies and prepare <code>pre-commit</code> hooks you would need to run:</p> <pre><code>make install # Regular dependencies for normal usage\n\nor\n\nmake install-dev # Dev dependencies including docs and linting\n</code></pre> <p>To activate your <code>.venv</code> run <code>source .venv/bin/activate</code>.</p> <p>Welcome to the team!</p>"},{"location":"contributing/#codestyle","title":"Codestyle","text":"<p>After installation you may execute code formatting.</p> <pre><code>make lint\n</code></pre> <p>Many checks are configured for this project. Command <code>make lint</code> will check style with <code>ruff</code>. We use Google style for docstrings.</p>"},{"location":"contributing/#before-submitting","title":"Before submitting","text":"<p>Before submitting your code please do the following steps:</p> <ol> <li>Add any changes you want</li> <li>Add tests for the new changes</li> <li>Edit documentation if you have changed something significant</li> <li>Run <code>make fix-style</code> to format your changes.</li> <li>Run <code>make lint</code> to ensure that formats are okay.</li> <li>Write a good commit message.</li> </ol>"},{"location":"contributing/#other-help","title":"Other help","text":"<p>You can contribute by spreading a word about this library. It would also be a huge contribution to write a short article on how you are using this project. You can also share your best practices with us.</p>"},{"location":"notebooks/concept_explainer_training/","title":"Training a concept explainer","text":"<pre><code>def hello_world():\n    print(\"Hello world!\")\n</code></pre>"},{"location":"notebooks/concept_explainer_training/#training-a-concept-explainer","title":"Training a Concept Explainer","text":""},{"location":"notebooks/quickstart/","title":"Quickstart","text":"<pre><code>def hello_world():\n    print(\"Hello world!\")\n</code></pre>"},{"location":"notebooks/quickstart/#quickstart","title":"Quickstart","text":""}]}